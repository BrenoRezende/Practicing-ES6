{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["NegociacaoService","_httpService","HttpService","Promise","all","obterNegociacoesSemana","obterNegociacoesSemanaAnterior","obterNegociacoesSemanaRetrasada","then","negociacoes","reduce","arrayConcatenado","array","concat","catch","console","log","error","Error","get","map","Negociacao","Date","negociacao","data","quantidade","valor","ConnectionFactory","getConnection","NegociacaoDao","connection","dao","adiciona","listaTodos","apagaTodos","listaAtual","obterTodasNegociacoes","filter","some","isEquals","negociacaoExistente"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["class NegociacaoService {\r\n\r\n    constructor() {\r\n        this._httpService = new HttpService();\r\n    }\r\n\r\n    obterTodasNegociacoes() {\r\n        return Promise.all([\r\n            this.obterNegociacoesSemana(),\r\n            this.obterNegociacoesSemanaAnterior(),\r\n            this.obterNegociacoesSemanaRetrasada()\r\n        ])\r\n        .then(negociacoes => negociacoes.reduce((arrayConcatenado, array) => arrayConcatenado.concat(array)))\r\n        .catch(error => {\r\n            console.log(error);\r\n            throw new Error(error);\r\n        })\r\n    }\r\n\r\n    obterNegociacoesSemana() {\r\n\r\n        return this._httpService.get('negociacoes/semana')\r\n            .then(negociacoes =>\r\n                negociacoes.map(negociacao => new Negociacao(new Date(negociacao.data), negociacao.quantidade, negociacao.valor)))\r\n            .catch(error => {\r\n                console.log(error);\r\n                throw new Error('Não foi possível obter as negociações da semana.');\r\n            });\r\n    }\r\n\r\n    obterNegociacoesSemanaAnterior() {\r\n\r\n        return this._httpService.get('negociacoes/anterior')\r\n            .then(negociacoes =>\r\n                negociacoes.map(negociacao => new Negociacao(new Date(negociacao.data), negociacao.quantidade, negociacao.valor)))\r\n            .catch(error => {\r\n                console.log(error);\r\n                throw new Error('Não foi possível obter as negociações da semana anterior.');\r\n            });\r\n    }\r\n\r\n    obterNegociacoesSemanaRetrasada() {\r\n\r\n        return this._httpService.get('negociacoes/retrasada')\r\n            .then(negociacoes =>\r\n                negociacoes.map(negociacao => new Negociacao(new Date(negociacao.data), negociacao.quantidade, negociacao.valor)))\r\n            .catch(error => {\r\n                console.log(error);\r\n                throw new Error('Não foi possível obter as negociações da semana retrasada.');\r\n            });\r\n    }\r\n\r\n    cadastra(negociacao) {\r\n        return ConnectionFactory.getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.adiciona(negociacao))\r\n            .then(() => 'Negociação adicionada com sucesso!')            \r\n            .catch(error => {\r\n                throw new Error(error);\r\n            });\r\n    }\r\n\r\n    lista() {\r\n        return ConnectionFactory.getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.listaTodos())\r\n            .then(negociacoes => negociacoes)\r\n            .catch(error => {\r\n                throw new Error(error);\r\n            })\r\n    }\r\n\r\n    apaga() {\r\n        return ConnectionFactory.getConnection()\r\n            .then(connection => new NegociacaoDao(connection).apagaTodos())\r\n            .then(() => 'Negociações removidas com sucesso!')\r\n            .catch(error => {\r\n                throw new Error(error);\r\n            });\r\n    }\r\n\r\n    importa(listaAtual) {\r\n        return this.obterTodasNegociacoes()\r\n            .then(negociacoes => negociacoes.filter(negociacao =>\r\n                !listaAtual.negociacoes.some(negociacaoExistente =>\r\n                    negociacao.isEquals(negociacaoExistente))))\r\n            .catch(error => {\r\n                throw new Error(error);\r\n            });\r\n    }\r\n\r\n}"]}